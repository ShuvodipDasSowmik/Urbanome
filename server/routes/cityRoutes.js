const express = require('express');
const router = express.Router();

// GET /api/cities - Get list of cities
router.get('/', async (req, res) => {
  try {
    // Mock data for cities - in a real app this would come from a database
    const cities = [
      {
        id: 1,
        name: 'Dhaka',
        country: 'Bangladesh',
        population: 9400000,
        area: 306.4,
        coordinates: { lat: 23.8103, lon: 90.4125 },
        greenSpacePercentage: 8.2,
        averageTemperature: 26.0,
        lastUpdated: new Date().toISOString()
      },
      {
        id: 2,
        name: 'Mumbai',
        country: 'India',
        population: 20400000,
        area: 603.4,
        coordinates: { lat: 19.0760, lon: 72.8777 },
        greenSpacePercentage: 12.5,
        averageTemperature: 27.2,
        lastUpdated: new Date().toISOString()
      },
      {
        id: 3,
        name: 'Jakarta',
        country: 'Indonesia',
        population: 10770000,
        area: 664.0,
        coordinates: { lat: -6.2088, lon: 106.8456 },
        greenSpacePercentage: 9.8,
        averageTemperature: 27.8,
        lastUpdated: new Date().toISOString()
      }
    ];

    res.json({
      success: true,
      data: cities,
      count: cities.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to fetch cities',
      error: error.message
    });
  }
});

// GET /api/cities/:id - Get specific city
router.get('/:id', async (req, res) => {
  try {
    const cityId = parseInt(req.params.id);
    
    // Mock city data
    const city = {
      id: cityId,
      name: 'Dhaka',
      country: 'Bangladesh',
      population: 9400000,
      area: 306.4,
      density: 30700,
      coordinates: { lat: 23.8103, lon: 90.4125 },
      greenSpacePercentage: 8.2,
      averageTemperature: 26.0,
      districts: [
        { name: 'Dhanmondi', population: 500000, greenSpace: 15.2 },
        { name: 'Gulshan', population: 300000, greenSpace: 22.1 },
        { name: 'Old Dhaka', population: 800000, greenSpace: 3.5 }
      ],
      lastUpdated: new Date().toISOString()
    };

    res.json({
      success: true,
      data: city
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to fetch city',
      error: error.message
    });
  }
});

// POST /api/cities - Create new city (admin only)
router.post('/', async (req, res) => {
  try {
    const { name, country, population, area, coordinates } = req.body;

    // Validate required fields
    if (!name || !country || !coordinates) {
      return res.status(400).json({
        success: false,
        message: 'Name, country, and coordinates are required'
      });
    }

    // Mock creating a new city
    const newCity = {
      id: Date.now(), // In real app, this would be generated by the database
      name,
      country,
      population: population || 0,
      area: area || 0,
      coordinates,
      greenSpacePercentage: 0,
      averageTemperature: 0,
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString()
    };

    res.status(201).json({
      success: true,
      message: 'City created successfully',
      data: newCity
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to create city',
      error: error.message
    });
  }
});

// PUT /api/cities/:id - Update city
router.put('/:id', async (req, res) => {
  try {
    const cityId = parseInt(req.params.id);
    const updates = req.body;

    // Mock updating city
    const updatedCity = {
      id: cityId,
      ...updates,
      lastUpdated: new Date().toISOString()
    };

    res.json({
      success: true,
      message: 'City updated successfully',
      data: updatedCity
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to update city',
      error: error.message
    });
  }
});

// DELETE /api/cities/:id - Delete city (admin only)
router.delete('/:id', async (req, res) => {
  try {
    const cityId = parseInt(req.params.id);

    res.json({
      success: true,
      message: `City ${cityId} deleted successfully`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to delete city',
      error: error.message
    });
  }
});

module.exports = router;
